/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UsageRecord } from "./UsageRecord";
import { UsageRecordCountArgs } from "./UsageRecordCountArgs";
import { UsageRecordFindManyArgs } from "./UsageRecordFindManyArgs";
import { UsageRecordFindUniqueArgs } from "./UsageRecordFindUniqueArgs";
import { CreateUsageRecordArgs } from "./CreateUsageRecordArgs";
import { UpdateUsageRecordArgs } from "./UpdateUsageRecordArgs";
import { DeleteUsageRecordArgs } from "./DeleteUsageRecordArgs";
import { Customer } from "../../customer/base/Customer";
import { UsageRecordService } from "../usageRecord.service";
@graphql.Resolver(() => UsageRecord)
export class UsageRecordResolverBase {
  constructor(protected readonly service: UsageRecordService) {}

  async _usageRecordsMeta(
    @graphql.Args() args: UsageRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UsageRecord])
  async usageRecords(
    @graphql.Args() args: UsageRecordFindManyArgs
  ): Promise<UsageRecord[]> {
    return this.service.usageRecords(args);
  }

  @graphql.Query(() => UsageRecord, { nullable: true })
  async usageRecord(
    @graphql.Args() args: UsageRecordFindUniqueArgs
  ): Promise<UsageRecord | null> {
    const result = await this.service.usageRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UsageRecord)
  async createUsageRecord(
    @graphql.Args() args: CreateUsageRecordArgs
  ): Promise<UsageRecord> {
    return await this.service.createUsageRecord({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UsageRecord)
  async updateUsageRecord(
    @graphql.Args() args: UpdateUsageRecordArgs
  ): Promise<UsageRecord | null> {
    try {
      return await this.service.updateUsageRecord({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsageRecord)
  async deleteUsageRecord(
    @graphql.Args() args: DeleteUsageRecordArgs
  ): Promise<UsageRecord | null> {
    try {
      return await this.service.deleteUsageRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: UsageRecord
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
