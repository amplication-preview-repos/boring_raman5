/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UsageRecordService } from "../usageRecord.service";
import { UsageRecordCreateInput } from "./UsageRecordCreateInput";
import { UsageRecord } from "./UsageRecord";
import { UsageRecordFindManyArgs } from "./UsageRecordFindManyArgs";
import { UsageRecordWhereUniqueInput } from "./UsageRecordWhereUniqueInput";
import { UsageRecordUpdateInput } from "./UsageRecordUpdateInput";

export class UsageRecordControllerBase {
  constructor(protected readonly service: UsageRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UsageRecord })
  async createUsageRecord(
    @common.Body() data: UsageRecordCreateInput
  ): Promise<UsageRecord> {
    return await this.service.createUsageRecord({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        amountUsed: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UsageRecord] })
  @ApiNestedQuery(UsageRecordFindManyArgs)
  async usageRecords(@common.Req() request: Request): Promise<UsageRecord[]> {
    const args = plainToClass(UsageRecordFindManyArgs, request.query);
    return this.service.usageRecords({
      ...args,
      select: {
        amountUsed: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UsageRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async usageRecord(
    @common.Param() params: UsageRecordWhereUniqueInput
  ): Promise<UsageRecord | null> {
    const result = await this.service.usageRecord({
      where: params,
      select: {
        amountUsed: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UsageRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUsageRecord(
    @common.Param() params: UsageRecordWhereUniqueInput,
    @common.Body() data: UsageRecordUpdateInput
  ): Promise<UsageRecord | null> {
    try {
      return await this.service.updateUsageRecord({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          amountUsed: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          date: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UsageRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUsageRecord(
    @common.Param() params: UsageRecordWhereUniqueInput
  ): Promise<UsageRecord | null> {
    try {
      return await this.service.deleteUsageRecord({
        where: params,
        select: {
          amountUsed: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          date: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
