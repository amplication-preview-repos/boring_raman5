/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UsageRecord as PrismaUsageRecord,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class UsageRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UsageRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.usageRecord.count(args);
  }

  async usageRecords(
    args: Prisma.UsageRecordFindManyArgs
  ): Promise<PrismaUsageRecord[]> {
    return this.prisma.usageRecord.findMany(args);
  }
  async usageRecord(
    args: Prisma.UsageRecordFindUniqueArgs
  ): Promise<PrismaUsageRecord | null> {
    return this.prisma.usageRecord.findUnique(args);
  }
  async createUsageRecord(
    args: Prisma.UsageRecordCreateArgs
  ): Promise<PrismaUsageRecord> {
    return this.prisma.usageRecord.create(args);
  }
  async updateUsageRecord(
    args: Prisma.UsageRecordUpdateArgs
  ): Promise<PrismaUsageRecord> {
    return this.prisma.usageRecord.update(args);
  }
  async deleteUsageRecord(
    args: Prisma.UsageRecordDeleteArgs
  ): Promise<PrismaUsageRecord> {
    return this.prisma.usageRecord.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.usageRecord
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
