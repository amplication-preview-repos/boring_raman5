/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PumpStationService } from "../pumpStation.service";
import { PumpStationCreateInput } from "./PumpStationCreateInput";
import { PumpStation } from "./PumpStation";
import { PumpStationFindManyArgs } from "./PumpStationFindManyArgs";
import { PumpStationWhereUniqueInput } from "./PumpStationWhereUniqueInput";
import { PumpStationUpdateInput } from "./PumpStationUpdateInput";

export class PumpStationControllerBase {
  constructor(protected readonly service: PumpStationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PumpStation })
  async createPumpStation(
    @common.Body() data: PumpStationCreateInput
  ): Promise<PumpStation> {
    return await this.service.createPumpStation({
      data: data,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PumpStation] })
  @ApiNestedQuery(PumpStationFindManyArgs)
  async pumpStations(@common.Req() request: Request): Promise<PumpStation[]> {
    const args = plainToClass(PumpStationFindManyArgs, request.query);
    return this.service.pumpStations({
      ...args,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PumpStation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pumpStation(
    @common.Param() params: PumpStationWhereUniqueInput
  ): Promise<PumpStation | null> {
    const result = await this.service.pumpStation({
      where: params,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PumpStation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePumpStation(
    @common.Param() params: PumpStationWhereUniqueInput,
    @common.Body() data: PumpStationUpdateInput
  ): Promise<PumpStation | null> {
    try {
      return await this.service.updatePumpStation({
        where: params,
        data: data,
        select: {
          capacity: true,
          createdAt: true,
          id: true,
          location: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PumpStation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePumpStation(
    @common.Param() params: PumpStationWhereUniqueInput
  ): Promise<PumpStation | null> {
    try {
      return await this.service.deletePumpStation({
        where: params,
        select: {
          capacity: true,
          createdAt: true,
          id: true,
          location: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
