/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PumpStation } from "./PumpStation";
import { PumpStationCountArgs } from "./PumpStationCountArgs";
import { PumpStationFindManyArgs } from "./PumpStationFindManyArgs";
import { PumpStationFindUniqueArgs } from "./PumpStationFindUniqueArgs";
import { CreatePumpStationArgs } from "./CreatePumpStationArgs";
import { UpdatePumpStationArgs } from "./UpdatePumpStationArgs";
import { DeletePumpStationArgs } from "./DeletePumpStationArgs";
import { PumpStationService } from "../pumpStation.service";
@graphql.Resolver(() => PumpStation)
export class PumpStationResolverBase {
  constructor(protected readonly service: PumpStationService) {}

  async _pumpStationsMeta(
    @graphql.Args() args: PumpStationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PumpStation])
  async pumpStations(
    @graphql.Args() args: PumpStationFindManyArgs
  ): Promise<PumpStation[]> {
    return this.service.pumpStations(args);
  }

  @graphql.Query(() => PumpStation, { nullable: true })
  async pumpStation(
    @graphql.Args() args: PumpStationFindUniqueArgs
  ): Promise<PumpStation | null> {
    const result = await this.service.pumpStation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PumpStation)
  async createPumpStation(
    @graphql.Args() args: CreatePumpStationArgs
  ): Promise<PumpStation> {
    return await this.service.createPumpStation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PumpStation)
  async updatePumpStation(
    @graphql.Args() args: UpdatePumpStationArgs
  ): Promise<PumpStation | null> {
    try {
      return await this.service.updatePumpStation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PumpStation)
  async deletePumpStation(
    @graphql.Args() args: DeletePumpStationArgs
  ): Promise<PumpStation | null> {
    try {
      return await this.service.deletePumpStation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
