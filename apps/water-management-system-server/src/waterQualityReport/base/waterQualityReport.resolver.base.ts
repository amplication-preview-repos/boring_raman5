/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WaterQualityReport } from "./WaterQualityReport";
import { WaterQualityReportCountArgs } from "./WaterQualityReportCountArgs";
import { WaterQualityReportFindManyArgs } from "./WaterQualityReportFindManyArgs";
import { WaterQualityReportFindUniqueArgs } from "./WaterQualityReportFindUniqueArgs";
import { CreateWaterQualityReportArgs } from "./CreateWaterQualityReportArgs";
import { UpdateWaterQualityReportArgs } from "./UpdateWaterQualityReportArgs";
import { DeleteWaterQualityReportArgs } from "./DeleteWaterQualityReportArgs";
import { Reservoir } from "../../reservoir/base/Reservoir";
import { WaterQualityReportService } from "../waterQualityReport.service";
@graphql.Resolver(() => WaterQualityReport)
export class WaterQualityReportResolverBase {
  constructor(protected readonly service: WaterQualityReportService) {}

  async _waterQualityReportsMeta(
    @graphql.Args() args: WaterQualityReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WaterQualityReport])
  async waterQualityReports(
    @graphql.Args() args: WaterQualityReportFindManyArgs
  ): Promise<WaterQualityReport[]> {
    return this.service.waterQualityReports(args);
  }

  @graphql.Query(() => WaterQualityReport, { nullable: true })
  async waterQualityReport(
    @graphql.Args() args: WaterQualityReportFindUniqueArgs
  ): Promise<WaterQualityReport | null> {
    const result = await this.service.waterQualityReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WaterQualityReport)
  async createWaterQualityReport(
    @graphql.Args() args: CreateWaterQualityReportArgs
  ): Promise<WaterQualityReport> {
    return await this.service.createWaterQualityReport({
      ...args,
      data: {
        ...args.data,

        reservoir: args.data.reservoir
          ? {
              connect: args.data.reservoir,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => WaterQualityReport)
  async updateWaterQualityReport(
    @graphql.Args() args: UpdateWaterQualityReportArgs
  ): Promise<WaterQualityReport | null> {
    try {
      return await this.service.updateWaterQualityReport({
        ...args,
        data: {
          ...args.data,

          reservoir: args.data.reservoir
            ? {
                connect: args.data.reservoir,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WaterQualityReport)
  async deleteWaterQualityReport(
    @graphql.Args() args: DeleteWaterQualityReportArgs
  ): Promise<WaterQualityReport | null> {
    try {
      return await this.service.deleteWaterQualityReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Reservoir, {
    nullable: true,
    name: "reservoir",
  })
  async getReservoir(
    @graphql.Parent() parent: WaterQualityReport
  ): Promise<Reservoir | null> {
    const result = await this.service.getReservoir(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
