/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WaterQualityReport as PrismaWaterQualityReport,
  Reservoir as PrismaReservoir,
} from "@prisma/client";

export class WaterQualityReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WaterQualityReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.waterQualityReport.count(args);
  }

  async waterQualityReports(
    args: Prisma.WaterQualityReportFindManyArgs
  ): Promise<PrismaWaterQualityReport[]> {
    return this.prisma.waterQualityReport.findMany(args);
  }
  async waterQualityReport(
    args: Prisma.WaterQualityReportFindUniqueArgs
  ): Promise<PrismaWaterQualityReport | null> {
    return this.prisma.waterQualityReport.findUnique(args);
  }
  async createWaterQualityReport(
    args: Prisma.WaterQualityReportCreateArgs
  ): Promise<PrismaWaterQualityReport> {
    return this.prisma.waterQualityReport.create(args);
  }
  async updateWaterQualityReport(
    args: Prisma.WaterQualityReportUpdateArgs
  ): Promise<PrismaWaterQualityReport> {
    return this.prisma.waterQualityReport.update(args);
  }
  async deleteWaterQualityReport(
    args: Prisma.WaterQualityReportDeleteArgs
  ): Promise<PrismaWaterQualityReport> {
    return this.prisma.waterQualityReport.delete(args);
  }

  async getReservoir(parentId: string): Promise<PrismaReservoir | null> {
    return this.prisma.waterQualityReport
      .findUnique({
        where: { id: parentId },
      })
      .reservoir();
  }
}
