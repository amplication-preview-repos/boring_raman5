/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Reservoir } from "./Reservoir";
import { ReservoirCountArgs } from "./ReservoirCountArgs";
import { ReservoirFindManyArgs } from "./ReservoirFindManyArgs";
import { ReservoirFindUniqueArgs } from "./ReservoirFindUniqueArgs";
import { CreateReservoirArgs } from "./CreateReservoirArgs";
import { UpdateReservoirArgs } from "./UpdateReservoirArgs";
import { DeleteReservoirArgs } from "./DeleteReservoirArgs";
import { WaterQualityReportFindManyArgs } from "../../waterQualityReport/base/WaterQualityReportFindManyArgs";
import { WaterQualityReport } from "../../waterQualityReport/base/WaterQualityReport";
import { ReservoirService } from "../reservoir.service";
@graphql.Resolver(() => Reservoir)
export class ReservoirResolverBase {
  constructor(protected readonly service: ReservoirService) {}

  async _reservoirsMeta(
    @graphql.Args() args: ReservoirCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Reservoir])
  async reservoirs(
    @graphql.Args() args: ReservoirFindManyArgs
  ): Promise<Reservoir[]> {
    return this.service.reservoirs(args);
  }

  @graphql.Query(() => Reservoir, { nullable: true })
  async reservoir(
    @graphql.Args() args: ReservoirFindUniqueArgs
  ): Promise<Reservoir | null> {
    const result = await this.service.reservoir(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Reservoir)
  async createReservoir(
    @graphql.Args() args: CreateReservoirArgs
  ): Promise<Reservoir> {
    return await this.service.createReservoir({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Reservoir)
  async updateReservoir(
    @graphql.Args() args: UpdateReservoirArgs
  ): Promise<Reservoir | null> {
    try {
      return await this.service.updateReservoir({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reservoir)
  async deleteReservoir(
    @graphql.Args() args: DeleteReservoirArgs
  ): Promise<Reservoir | null> {
    try {
      return await this.service.deleteReservoir(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [WaterQualityReport], {
    name: "waterQualityReports",
  })
  async findWaterQualityReports(
    @graphql.Parent() parent: Reservoir,
    @graphql.Args() args: WaterQualityReportFindManyArgs
  ): Promise<WaterQualityReport[]> {
    const results = await this.service.findWaterQualityReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
