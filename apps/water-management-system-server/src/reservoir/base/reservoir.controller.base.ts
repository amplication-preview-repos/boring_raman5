/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReservoirService } from "../reservoir.service";
import { ReservoirCreateInput } from "./ReservoirCreateInput";
import { Reservoir } from "./Reservoir";
import { ReservoirFindManyArgs } from "./ReservoirFindManyArgs";
import { ReservoirWhereUniqueInput } from "./ReservoirWhereUniqueInput";
import { ReservoirUpdateInput } from "./ReservoirUpdateInput";
import { WaterQualityReportFindManyArgs } from "../../waterQualityReport/base/WaterQualityReportFindManyArgs";
import { WaterQualityReport } from "../../waterQualityReport/base/WaterQualityReport";
import { WaterQualityReportWhereUniqueInput } from "../../waterQualityReport/base/WaterQualityReportWhereUniqueInput";

export class ReservoirControllerBase {
  constructor(protected readonly service: ReservoirService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reservoir })
  async createReservoir(
    @common.Body() data: ReservoirCreateInput
  ): Promise<Reservoir> {
    return await this.service.createReservoir({
      data: data,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
        waterLevel: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Reservoir] })
  @ApiNestedQuery(ReservoirFindManyArgs)
  async reservoirs(@common.Req() request: Request): Promise<Reservoir[]> {
    const args = plainToClass(ReservoirFindManyArgs, request.query);
    return this.service.reservoirs({
      ...args,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
        waterLevel: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reservoir })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reservoir(
    @common.Param() params: ReservoirWhereUniqueInput
  ): Promise<Reservoir | null> {
    const result = await this.service.reservoir({
      where: params,
      select: {
        capacity: true,
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
        waterLevel: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reservoir })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReservoir(
    @common.Param() params: ReservoirWhereUniqueInput,
    @common.Body() data: ReservoirUpdateInput
  ): Promise<Reservoir | null> {
    try {
      return await this.service.updateReservoir({
        where: params,
        data: data,
        select: {
          capacity: true,
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
          waterLevel: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reservoir })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReservoir(
    @common.Param() params: ReservoirWhereUniqueInput
  ): Promise<Reservoir | null> {
    try {
      return await this.service.deleteReservoir({
        where: params,
        select: {
          capacity: true,
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
          waterLevel: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/waterQualityReports")
  @ApiNestedQuery(WaterQualityReportFindManyArgs)
  async findWaterQualityReports(
    @common.Req() request: Request,
    @common.Param() params: ReservoirWhereUniqueInput
  ): Promise<WaterQualityReport[]> {
    const query = plainToClass(WaterQualityReportFindManyArgs, request.query);
    const results = await this.service.findWaterQualityReports(params.id, {
      ...query,
      select: {
        contaminants: true,
        createdAt: true,
        id: true,
        phLevel: true,
        reportDate: true,

        reservoir: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/waterQualityReports")
  async connectWaterQualityReports(
    @common.Param() params: ReservoirWhereUniqueInput,
    @common.Body() body: WaterQualityReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      waterQualityReports: {
        connect: body,
      },
    };
    await this.service.updateReservoir({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/waterQualityReports")
  async updateWaterQualityReports(
    @common.Param() params: ReservoirWhereUniqueInput,
    @common.Body() body: WaterQualityReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      waterQualityReports: {
        set: body,
      },
    };
    await this.service.updateReservoir({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/waterQualityReports")
  async disconnectWaterQualityReports(
    @common.Param() params: ReservoirWhereUniqueInput,
    @common.Body() body: WaterQualityReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      waterQualityReports: {
        disconnect: body,
      },
    };
    await this.service.updateReservoir({
      where: params,
      data,
      select: { id: true },
    });
  }
}
